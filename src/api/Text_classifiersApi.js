/**
 * FeersumNLU API
 * This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: nlu@feersum.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClassLabelList', 'model/ClassLabelPair', 'model/CreateDetails', 'model/InstanceDetail', 'model/InstanceDetailList', 'model/LabelledTextSampleList', 'model/ScoredLabelList', 'model/TextInput', 'model/TotalSamples', 'model/TrainDetails'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClassLabelList'), require('../model/ClassLabelPair'), require('../model/CreateDetails'), require('../model/InstanceDetail'), require('../model/InstanceDetailList'), require('../model/LabelledTextSampleList'), require('../model/ScoredLabelList'), require('../model/TextInput'), require('../model/TotalSamples'), require('../model/TrainDetails'));
  } else {
    // Browser globals (root is window)
    if (!root.FeersumNluApi) {
      root.FeersumNluApi = {};
    }
    root.FeersumNluApi.Text_classifiersApi = factory(root.FeersumNluApi.ApiClient, root.FeersumNluApi.ClassLabelList, root.FeersumNluApi.ClassLabelPair, root.FeersumNluApi.CreateDetails, root.FeersumNluApi.InstanceDetail, root.FeersumNluApi.InstanceDetailList, root.FeersumNluApi.LabelledTextSampleList, root.FeersumNluApi.ScoredLabelList, root.FeersumNluApi.TextInput, root.FeersumNluApi.TotalSamples, root.FeersumNluApi.TrainDetails);
  }
}(this, function(ApiClient, ClassLabelList, ClassLabelPair, CreateDetails, InstanceDetail, InstanceDetailList, LabelledTextSampleList, ScoredLabelList, TextInput, TotalSamples, TrainDetails) {
  'use strict';

  /**
   * Text_classifiers service.
   * @module api/Text_classifiersApi
   * @version 2.0.3
   */

  /**
   * Constructs a new Text_classifiersApi. 
   * @alias module:api/Text_classifiersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add training samples.
     * Add training samples to named text classifier. Returns the classifier&#39;s updated number of training samples.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/LabelledTextSampleList} labelledTextSampleList List of labelled text samples.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TotalSamples} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierAddTrainingSamplesWithHttpInfo = function(instanceName, labelledTextSampleList) {
      var postBody = labelledTextSampleList;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierAddTrainingSamples");
      }

      // verify the required parameter 'labelledTextSampleList' is set
      if (labelledTextSampleList === undefined || labelledTextSampleList === null) {
        throw new Error("Missing the required parameter 'labelledTextSampleList' when calling controllersTextClassifiersControllerTextClassifierAddTrainingSamples");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TotalSamples;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/training_samples', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add training samples.
     * Add training samples to named text classifier. Returns the classifier&#39;s updated number of training samples.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/LabelledTextSampleList} labelledTextSampleList List of labelled text samples.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TotalSamples}
     */
    this.controllersTextClassifiersControllerTextClassifierAddTrainingSamples = function(instanceName, labelledTextSampleList) {
      return this.controllersTextClassifiersControllerTextClassifierAddTrainingSamplesWithHttpInfo(instanceName, labelledTextSampleList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a text classifier.
     * Create a new text classifier or load one from the store. Returns the details of the new or loaded instance.
     * @param {module:model/CreateDetails} createDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceDetail} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierCreateWithHttpInfo = function(createDetails) {
      var postBody = createDetails;

      // verify the required parameter 'createDetails' is set
      if (createDetails === undefined || createDetails === null) {
        throw new Error("Missing the required parameter 'createDetails' when calling controllersTextClassifiersControllerTextClassifierCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstanceDetail;

      return this.apiClient.callApi(
        '/text_classifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a text classifier.
     * Create a new text classifier or load one from the store. Returns the details of the new or loaded instance.
     * @param {module:model/CreateDetails} createDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceDetail}
     */
    this.controllersTextClassifiersControllerTextClassifierCreate = function(createDetails) {
      return this.controllersTextClassifiersControllerTextClassifierCreateWithHttpInfo(createDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Endpoint to aid in the curation of a model instance.
     * Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/ClassLabelPair} labelPair The true label, predicted label and matrix (train/test) to use.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelledTextSampleList} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierCurateWithHttpInfo = function(instanceName, labelPair) {
      var postBody = labelPair;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierCurate");
      }

      // verify the required parameter 'labelPair' is set
      if (labelPair === undefined || labelPair === null) {
        throw new Error("Missing the required parameter 'labelPair' when calling controllersTextClassifiersControllerTextClassifierCurate");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabelledTextSampleList;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/curate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Endpoint to aid in the curation of a model instance.
     * Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/ClassLabelPair} labelPair The true label, predicted label and matrix (train/test) to use.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelledTextSampleList}
     */
    this.controllersTextClassifiersControllerTextClassifierCurate = function(instanceName, labelPair) {
      return this.controllersTextClassifiersControllerTextClassifierCurateWithHttpInfo(instanceName, labelPair)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete training samples.
     * Delete the training samples of the named text classifier. Returns the deleted samples.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelledTextSampleList} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierDelTrainingSamplesWithHttpInfo = function(instanceName) {
      var postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierDelTrainingSamples");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabelledTextSampleList;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/training_samples', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete training samples.
     * Delete the training samples of the named text classifier. Returns the deleted samples.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelledTextSampleList}
     */
    this.controllersTextClassifiersControllerTextClassifierDelTrainingSamples = function(instanceName) {
      return this.controllersTextClassifiersControllerTextClassifierDelTrainingSamplesWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of named instance.
     * Get the details of the named text classifier instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceDetail} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierGetDetailsWithHttpInfo = function(instanceName) {
      var postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierGetDetails");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstanceDetail;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of named instance.
     * Get the details of the named text classifier instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceDetail}
     */
    this.controllersTextClassifiersControllerTextClassifierGetDetails = function(instanceName) {
      return this.controllersTextClassifiersControllerTextClassifierGetDetailsWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of loaded text classifiers.
     * Get the list of loaded text classifiers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceDetailList} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierGetDetailsAllWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstanceDetailList;

      return this.apiClient.callApi(
        '/text_classifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of loaded text classifiers.
     * Get the list of loaded text classifiers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceDetailList}
     */
    this.controllersTextClassifiersControllerTextClassifierGetDetailsAll = function() {
      return this.controllersTextClassifiersControllerTextClassifierGetDetailsAllWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of possible labels.
     * Returns the classifier&#39;s list of possible class labels.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClassLabelList} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierGetLabelsWithHttpInfo = function(instanceName) {
      var postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierGetLabels");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassLabelList;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/get_labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of possible labels.
     * Returns the classifier&#39;s list of possible class labels.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClassLabelList}
     */
    this.controllersTextClassifiersControllerTextClassifierGetLabels = function(instanceName) {
      return this.controllersTextClassifiersControllerTextClassifierGetLabelsWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get training samples.
     * Get the training samples of the named text classifier.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LabelledTextSampleList} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierGetTrainingSamplesWithHttpInfo = function(instanceName) {
      var postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierGetTrainingSamples");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabelledTextSampleList;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/training_samples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get training samples.
     * Get the training samples of the named text classifier.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LabelledTextSampleList}
     */
    this.controllersTextClassifiersControllerTextClassifierGetTrainingSamples = function(instanceName) {
      return this.controllersTextClassifiersControllerTextClassifierGetTrainingSamplesWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Classify text.
     * Classifies the text and returns a probability sorted list of classes.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScoredLabelList} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierRetrieveWithHttpInfo = function(instanceName, textInput) {
      var postBody = textInput;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierRetrieve");
      }

      // verify the required parameter 'textInput' is set
      if (textInput === undefined || textInput === null) {
        throw new Error("Missing the required parameter 'textInput' when calling controllersTextClassifiersControllerTextClassifierRetrieve");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScoredLabelList;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Classify text.
     * Classifies the text and returns a probability sorted list of classes.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScoredLabelList}
     */
    this.controllersTextClassifiersControllerTextClassifierRetrieve = function(instanceName, textInput) {
      return this.controllersTextClassifiersControllerTextClassifierRetrieveWithHttpInfo(instanceName, textInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Train the named text classifier.
     * Train the named text classifier with the training and testing data already provided. Returns the details of the model instance.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TrainDetails} trainDetails The arguments provided to the train operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceDetail} and HTTP response
     */
    this.controllersTextClassifiersControllerTextClassifierTrainWithHttpInfo = function(instanceName, trainDetails) {
      var postBody = trainDetails;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling controllersTextClassifiersControllerTextClassifierTrain");
      }

      // verify the required parameter 'trainDetails' is set
      if (trainDetails === undefined || trainDetails === null) {
        throw new Error("Missing the required parameter 'trainDetails' when calling controllersTextClassifiersControllerTextClassifierTrain");
      }


      var pathParams = {
        'instance_name': instanceName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstanceDetail;

      return this.apiClient.callApi(
        '/text_classifiers/{instance_name}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Train the named text classifier.
     * Train the named text classifier with the training and testing data already provided. Returns the details of the model instance.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TrainDetails} trainDetails The arguments provided to the train operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceDetail}
     */
    this.controllersTextClassifiersControllerTextClassifierTrain = function(instanceName, trainDetails) {
      return this.controllersTextClassifiersControllerTextClassifierTrainWithHttpInfo(instanceName, trainDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
