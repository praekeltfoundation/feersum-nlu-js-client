/**
 * FeersumNLU API
 * This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: nlu@feersum.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DucklingEntCreateDetails from '../model/DucklingEntCreateDetails';
import DucklingInstanceDetail from '../model/DucklingInstanceDetail';
import DucklingInstanceDetailList from '../model/DucklingInstanceDetailList';
import EntityList from '../model/EntityList';
import TextInput from '../model/TextInput';

/**
* Duckling_entity_extractors service.
* @module api/Duckling_entity_extractorsApi
* @version 2.0.3
*/
export default class Duckling_entity_extractorsApi {

    /**
    * Constructs a new Duckling_entity_extractorsApi. 
    * @alias module:api/Duckling_entity_extractorsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a duckling entity extractor.
     * Create a new duckling entity extractor or load one from the store.
     * @param {module:model/DucklingEntCreateDetails} ducklingEntCreateDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DucklingInstanceDetail} and HTTP response
     */
    ducklingEntityExtractorCreateWithHttpInfo(ducklingEntCreateDetails) {
      let postBody = ducklingEntCreateDetails;

      // verify the required parameter 'ducklingEntCreateDetails' is set
      if (ducklingEntCreateDetails === undefined || ducklingEntCreateDetails === null) {
        throw new Error("Missing the required parameter 'ducklingEntCreateDetails' when calling ducklingEntityExtractorCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DucklingInstanceDetail;

      return this.apiClient.callApi(
        '/duckling_entity_extractors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a duckling entity extractor.
     * Create a new duckling entity extractor or load one from the store.
     * @param {module:model/DucklingEntCreateDetails} ducklingEntCreateDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DucklingInstanceDetail}
     */
    ducklingEntityExtractorCreate(ducklingEntCreateDetails) {
      return this.ducklingEntityExtractorCreateWithHttpInfo(ducklingEntCreateDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of named instance.
     * Get the details of the named duckling entity extractor instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DucklingInstanceDetail} and HTTP response
     */
    ducklingEntityExtractorGetDetailsWithHttpInfo(instanceName) {
      let postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling ducklingEntityExtractorGetDetails");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DucklingInstanceDetail;

      return this.apiClient.callApi(
        '/duckling_entity_extractors/{instance_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of named instance.
     * Get the details of the named duckling entity extractor instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DucklingInstanceDetail}
     */
    ducklingEntityExtractorGetDetails(instanceName) {
      return this.ducklingEntityExtractorGetDetailsWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of loaded regular expression entity extractors.
     * Get the list of loaded duckling entity extractors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DucklingInstanceDetailList} and HTTP response
     */
    ducklingEntityExtractorGetDetailsAllWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DucklingInstanceDetailList;

      return this.apiClient.callApi(
        '/duckling_entity_extractors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of loaded regular expression entity extractors.
     * Get the list of loaded duckling entity extractors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DucklingInstanceDetailList}
     */
    ducklingEntityExtractorGetDetailsAll() {
      return this.ducklingEntityExtractorGetDetailsAllWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Extract information based on the regular expression.
     * Extract the entities parsed by duckling.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityList} and HTTP response
     */
    ducklingEntityExtractorRetrieveWithHttpInfo(instanceName, textInput) {
      let postBody = textInput;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling ducklingEntityExtractorRetrieve");
      }

      // verify the required parameter 'textInput' is set
      if (textInput === undefined || textInput === null) {
        throw new Error("Missing the required parameter 'textInput' when calling ducklingEntityExtractorRetrieve");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityList;

      return this.apiClient.callApi(
        '/duckling_entity_extractors/{instance_name}/retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Extract information based on the regular expression.
     * Extract the entities parsed by duckling.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityList}
     */
    ducklingEntityExtractorRetrieve(instanceName, textInput) {
      return this.ducklingEntityExtractorRetrieveWithHttpInfo(instanceName, textInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
