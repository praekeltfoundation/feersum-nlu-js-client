/**
 * FeersumNLU API
 * This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: nlu@feersum.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClassLabelList from '../model/ClassLabelList';
import Lr4CreateDetails from '../model/Lr4CreateDetails';
import Lr4InstanceDetail from '../model/Lr4InstanceDetail';
import Lr4InstanceDetailList from '../model/Lr4InstanceDetailList';
import ScoredLabelList from '../model/ScoredLabelList';
import TextInput from '../model/TextInput';

/**
* Lr4_language_recognisers service.
* @module api/Lr4_language_recognisersApi
* @version 2.0.3
*/
export default class Lr4_language_recognisersApi {

    /**
    * Constructs a new Lr4_language_recognisersApi. 
    * @alias module:api/Lr4_language_recognisersApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a LR4 text language detector.
     * Create a new LR4 language detector from the pre-trained model name provided. &#39;lid_za&#39; is currently the only pre-trained model that is available, but it was trained on all 11 languages and is pretty accurate. Returns the detail of the new instance.
     * @param {module:model/Lr4CreateDetails} lr4CreateDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lr4InstanceDetail} and HTTP response
     */
    lr4LanguageRecogniserCreateWithHttpInfo(lr4CreateDetails) {
      let postBody = lr4CreateDetails;

      // verify the required parameter 'lr4CreateDetails' is set
      if (lr4CreateDetails === undefined || lr4CreateDetails === null) {
        throw new Error("Missing the required parameter 'lr4CreateDetails' when calling lr4LanguageRecogniserCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Lr4InstanceDetail;

      return this.apiClient.callApi(
        '/lr4_language_recognisers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a LR4 text language detector.
     * Create a new LR4 language detector from the pre-trained model name provided. &#39;lid_za&#39; is currently the only pre-trained model that is available, but it was trained on all 11 languages and is pretty accurate. Returns the detail of the new instance.
     * @param {module:model/Lr4CreateDetails} lr4CreateDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lr4InstanceDetail}
     */
    lr4LanguageRecogniserCreate(lr4CreateDetails) {
      return this.lr4LanguageRecogniserCreateWithHttpInfo(lr4CreateDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of named instance.
     * Get the details of the named LR4 text language detector instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lr4InstanceDetail} and HTTP response
     */
    lr4LanguageRecogniserGetDetailsWithHttpInfo(instanceName) {
      let postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling lr4LanguageRecogniserGetDetails");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Lr4InstanceDetail;

      return this.apiClient.callApi(
        '/lr4_language_recognisers/{instance_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of named instance.
     * Get the details of the named LR4 text language detector instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lr4InstanceDetail}
     */
    lr4LanguageRecogniserGetDetails(instanceName) {
      return this.lr4LanguageRecogniserGetDetailsWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of loaded LR4 text language detectors.
     * Get the list of loaded LR4 text language detectors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lr4InstanceDetailList} and HTTP response
     */
    lr4LanguageRecogniserGetDetailsAllWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Lr4InstanceDetailList;

      return this.apiClient.callApi(
        '/lr4_language_recognisers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of loaded LR4 text language detectors.
     * Get the list of loaded LR4 text language detectors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lr4InstanceDetailList}
     */
    lr4LanguageRecogniserGetDetailsAll() {
      return this.lr4LanguageRecogniserGetDetailsAllWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of possible labels.
     * Returns the classifier&#39;s list of possible class labels.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClassLabelList} and HTTP response
     */
    lr4LanguageRecogniserGetLabelsWithHttpInfo(instanceName) {
      let postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling lr4LanguageRecogniserGetLabels");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClassLabelList;

      return this.apiClient.callApi(
        '/lr4_language_recognisers/{instance_name}/get_labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of possible labels.
     * Returns the classifier&#39;s list of possible class labels.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClassLabelList}
     */
    lr4LanguageRecogniserGetLabels(instanceName) {
      return this.lr4LanguageRecogniserGetLabelsWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recognise the language the text is written in.
     * Recognise the language the text is written in. Returns the list of scored language codes.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScoredLabelList} and HTTP response
     */
    lr4LanguageRecogniserRetrieveWithHttpInfo(instanceName, textInput) {
      let postBody = textInput;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling lr4LanguageRecogniserRetrieve");
      }

      // verify the required parameter 'textInput' is set
      if (textInput === undefined || textInput === null) {
        throw new Error("Missing the required parameter 'textInput' when calling lr4LanguageRecogniserRetrieve");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoredLabelList;

      return this.apiClient.callApi(
        '/lr4_language_recognisers/{instance_name}/retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Recognise the language the text is written in.
     * Recognise the language the text is written in. Returns the list of scored language codes.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScoredLabelList}
     */
    lr4LanguageRecogniserRetrieve(instanceName, textInput) {
      return this.lr4LanguageRecogniserRetrieveWithHttpInfo(instanceName, textInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
