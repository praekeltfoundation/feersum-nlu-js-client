/**
 * FeersumNLU API
 * This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: nlu@feersum.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityList from '../model/EntityList';
import RegexEntCreateDetails from '../model/RegexEntCreateDetails';
import RegexInstanceDetail from '../model/RegexInstanceDetail';
import RegexInstanceDetailList from '../model/RegexInstanceDetailList';
import TextInput from '../model/TextInput';

/**
* Regex_entity_extractors service.
* @module api/Regex_entity_extractorsApi
* @version 2.0.3
*/
export default class Regex_entity_extractorsApi {

    /**
    * Constructs a new Regex_entity_extractorsApi. 
    * @alias module:api/Regex_entity_extractorsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a regular expression entity extractor.
     * Create a new regular expression entity extractor or load one from the store.
     * @param {module:model/RegexEntCreateDetails} regexEntCreateDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegexInstanceDetail} and HTTP response
     */
    regexEntityExtractorCreateWithHttpInfo(regexEntCreateDetails) {
      let postBody = regexEntCreateDetails;

      // verify the required parameter 'regexEntCreateDetails' is set
      if (regexEntCreateDetails === undefined || regexEntCreateDetails === null) {
        throw new Error("Missing the required parameter 'regexEntCreateDetails' when calling regexEntityExtractorCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegexInstanceDetail;

      return this.apiClient.callApi(
        '/regex_entity_extractors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a regular expression entity extractor.
     * Create a new regular expression entity extractor or load one from the store.
     * @param {module:model/RegexEntCreateDetails} regexEntCreateDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegexInstanceDetail}
     */
    regexEntityExtractorCreate(regexEntCreateDetails) {
      return this.regexEntityExtractorCreateWithHttpInfo(regexEntCreateDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of named instance.
     * Get the details of the named regular expression entity extractor instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegexInstanceDetail} and HTTP response
     */
    regexEntityExtractorGetDetailsWithHttpInfo(instanceName) {
      let postBody = null;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling regexEntityExtractorGetDetails");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegexInstanceDetail;

      return this.apiClient.callApi(
        '/regex_entity_extractors/{instance_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of named instance.
     * Get the details of the named regular expression entity extractor instance.
     * @param {String} instanceName The name of the model instance.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegexInstanceDetail}
     */
    regexEntityExtractorGetDetails(instanceName) {
      return this.regexEntityExtractorGetDetailsWithHttpInfo(instanceName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of loaded regular expression entity extractors.
     * Get the list of loaded regular expression entity extractors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegexInstanceDetailList} and HTTP response
     */
    regexEntityExtractorGetDetailsAllWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegexInstanceDetailList;

      return this.apiClient.callApi(
        '/regex_entity_extractors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of loaded regular expression entity extractors.
     * Get the list of loaded regular expression entity extractors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegexInstanceDetailList}
     */
    regexEntityExtractorGetDetailsAll() {
      return this.regexEntityExtractorGetDetailsAllWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Extract information based on the regular expression.
     * Extract the entities matching the regular expression.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityList} and HTTP response
     */
    regexEntityExtractorRetrieveWithHttpInfo(instanceName, textInput) {
      let postBody = textInput;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling regexEntityExtractorRetrieve");
      }

      // verify the required parameter 'textInput' is set
      if (textInput === undefined || textInput === null) {
        throw new Error("Missing the required parameter 'textInput' when calling regexEntityExtractorRetrieve");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityList;

      return this.apiClient.callApi(
        '/regex_entity_extractors/{instance_name}/retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Extract information based on the regular expression.
     * Extract the entities matching the regular expression.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityList}
     */
    regexEntityExtractorRetrieve(instanceName, textInput) {
      return this.regexEntityExtractorRetrieveWithHttpInfo(instanceName, textInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
