/**
 * FeersumNLU API
 * This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: nlu@feersum.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDetails from '../model/CreateDetails';
import InstanceDetail from '../model/InstanceDetail';
import NewWordList from '../model/NewWordList';
import TextInput from '../model/TextInput';
import WordAndDistanceList from '../model/WordAndDistanceList';
import WordAndThreshold from '../model/WordAndThreshold';

/**
* Word_manifolds service.
* @module api/Word_manifoldsApi
* @version 2.0.3
*/
export default class Word_manifoldsApi {

    /**
    * Constructs a new Word_manifoldsApi. 
    * @alias module:api/Word_manifoldsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add new words.
     * Add new words to the manifold that are similar to existing words and save the manifold. Warning! - Because this operation saves the updated word manifold to the store it could take a few seconds to complete. Returns the details of the updated instance.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/NewWordList} newWordList List of new words.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceDetail} and HTTP response
     */
    wordManifoldAddSimilarWordsWithHttpInfo(instanceName, newWordList) {
      let postBody = newWordList;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling wordManifoldAddSimilarWords");
      }

      // verify the required parameter 'newWordList' is set
      if (newWordList === undefined || newWordList === null) {
        throw new Error("Missing the required parameter 'newWordList' when calling wordManifoldAddSimilarWords");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceDetail;

      return this.apiClient.callApi(
        '/word_manifolds/{instance_name}/vocab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add new words.
     * Add new words to the manifold that are similar to existing words and save the manifold. Warning! - Because this operation saves the updated word manifold to the store it could take a few seconds to complete. Returns the details of the updated instance.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/NewWordList} newWordList List of new words.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceDetail}
     */
    wordManifoldAddSimilarWords(instanceName, newWordList) {
      return this.wordManifoldAddSimilarWordsWithHttpInfo(instanceName, newWordList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a word manifold model.
     * Create a new word manifold model using an input file or load a model from the store. Warning! - These models are quite big and each takes a few seconds to load/create. Returns the details of the new or loaded instance.
     * @param {module:model/CreateDetails} createDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceDetail} and HTTP response
     */
    wordManifoldCreateWithHttpInfo(createDetails) {
      let postBody = createDetails;

      // verify the required parameter 'createDetails' is set
      if (createDetails === undefined || createDetails === null) {
        throw new Error("Missing the required parameter 'createDetails' when calling wordManifoldCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceDetail;

      return this.apiClient.callApi(
        '/word_manifolds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a word manifold model.
     * Create a new word manifold model using an input file or load a model from the store. Warning! - These models are quite big and each takes a few seconds to load/create. Returns the details of the new or loaded instance.
     * @param {module:model/CreateDetails} createDetails The details of the instance to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceDetail}
     */
    wordManifoldCreate(createDetails) {
      return this.wordManifoldCreateWithHttpInfo(createDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find similar words.
     * Returns words from the manifold that are similar to the parameter word.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/WordAndThreshold} wordAndThreshold A word token and an accompanying threshold.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WordAndDistanceList} and HTTP response
     */
    wordManifoldGetSimilarWordsWithHttpInfo(instanceName, wordAndThreshold) {
      let postBody = wordAndThreshold;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling wordManifoldGetSimilarWords");
      }

      // verify the required parameter 'wordAndThreshold' is set
      if (wordAndThreshold === undefined || wordAndThreshold === null) {
        throw new Error("Missing the required parameter 'wordAndThreshold' when calling wordManifoldGetSimilarWords");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WordAndDistanceList;

      return this.apiClient.callApi(
        '/word_manifolds/{instance_name}/similar_words', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find similar words.
     * Returns words from the manifold that are similar to the parameter word.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/WordAndThreshold} wordAndThreshold A word token and an accompanying threshold.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WordAndDistanceList}
     */
    wordManifoldGetSimilarWords(instanceName, wordAndThreshold) {
      return this.wordManifoldGetSimilarWordsWithHttpInfo(instanceName, wordAndThreshold)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Spell correct a word.
     * Spell correct a word replacing it with the most likely word from the manifold. Returns one or more scored candidate words.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WordAndDistanceList} and HTTP response
     */
    wordManifoldSpellCorrectWithHttpInfo(instanceName, textInput) {
      let postBody = textInput;

      // verify the required parameter 'instanceName' is set
      if (instanceName === undefined || instanceName === null) {
        throw new Error("Missing the required parameter 'instanceName' when calling wordManifoldSpellCorrect");
      }

      // verify the required parameter 'textInput' is set
      if (textInput === undefined || textInput === null) {
        throw new Error("Missing the required parameter 'textInput' when calling wordManifoldSpellCorrect");
      }


      let pathParams = {
        'instance_name': instanceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WordAndDistanceList;

      return this.apiClient.callApi(
        '/word_manifolds/{instance_name}/spell_correct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Spell correct a word.
     * Spell correct a word replacing it with the most likely word from the manifold. Returns one or more scored candidate words.
     * @param {String} instanceName The name of the model instance.
     * @param {module:model/TextInput} textInput The input text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WordAndDistanceList}
     */
    wordManifoldSpellCorrect(instanceName, textInput) {
      return this.wordManifoldSpellCorrectWithHttpInfo(instanceName, textInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
