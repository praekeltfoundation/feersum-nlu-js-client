/**
 * FeersumNLU API
 * This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: nlu@feersum.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import LabeledWordManifold from './LabeledWordManifold';





/**
* The InstanceDetail model module.
* @module model/InstanceDetail
* @version 2.0.3
*/
export default class InstanceDetail {
    /**
    * Constructs a new <code>InstanceDetail</code>.
    * The model instance detail.
    * @alias module:model/InstanceDetail
    * @class
    * @param name {String} The sluggy-url-friendly-name of the instance.
    * @param id {String} The unique id of a specific version of the model instance.
    */

    constructor(name, id) {
        

        
        

        this['name'] = name;this['id'] = id;

        
    }

    /**
    * Constructs a <code>InstanceDetail</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/InstanceDetail} obj Optional instance to populate.
    * @return {module:model/InstanceDetail} The populated <code>InstanceDetail</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceDetail();

            
            
            

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('training_accuracy')) {
                obj['training_accuracy'] = ApiClient.convertToType(data['training_accuracy'], 'Number');
            }
            if (data.hasOwnProperty('training_stamp')) {
                obj['training_stamp'] = ApiClient.convertToType(data['training_stamp'], 'String');
            }
            if (data.hasOwnProperty('training_cm')) {
                obj['training_cm'] = ApiClient.convertToType(data['training_cm'], Object);
            }
            if (data.hasOwnProperty('cm_labels')) {
                obj['cm_labels'] = ApiClient.convertToType(data['cm_labels'], Object);
            }
            if (data.hasOwnProperty('word_manifold_list')) {
                obj['word_manifold_list'] = ApiClient.convertToType(data['word_manifold_list'], [LabeledWordManifold]);
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
    * The sluggy-url-friendly-name of the instance.
    * @member {String} name
    */
    name = undefined;
    /**
    * The unique id of a specific version of the model instance.
    * @member {String} id
    */
    id = undefined;
    /**
    * The longer existential description of this instance's purpose in life.
    * @member {String} desc
    */
    desc = undefined;
    /**
    * The accuracy of the model as measured on the training set.
    * @member {Number} training_accuracy
    */
    training_accuracy = undefined;
    /**
    * The time when the training operation concluded.
    * @member {String} training_stamp
    */
    training_stamp = undefined;
    /**
    * The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
    * @member {Object} training_cm
    */
    training_cm = undefined;
    /**
    * A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.
    * @member {Object} cm_labels
    */
    cm_labels = undefined;
    /**
    * The list of labelled word manifolds to use for training.
    * @member {Array.<module:model/LabeledWordManifold>} word_manifold_list
    */
    word_manifold_list = undefined;
    /**
    * There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
    * @member {Number} threshold
    */
    threshold = undefined;








}


